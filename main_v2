#include "mbed.h"
#include <string>
#include "rtos.h"


I2C i2c(I2C_SDA, I2C_SCL);
 
DigitalOut myled(LED1);
DigitalOut led1(LED1);
DigitalOut led(LED2);
DigitalOut led3(LED3);
 
Serial pc(SERIAL_TX, SERIAL_RX);
 
int address = 96;
char data_buff[10];
int tmp;


 
int FindAddress(void) {
int i = 1;
int int_address = 0;
    data_buff[0]=0x20;
 
    while(i){
      i=i2c.write(int_address, data_buff, 1, false);
      int_address++;
    }
    int_address--;
    data_buff[0]=0x0;
    i2c.read(int_address, data_buff, 1, false);
    return(int_address);
}
 
int ReadID(void) {
    data_buff[0]=0x20;
   
    i2c.write(address, data_buff, 1, false);
   
    data_buff[0]=0x0;
    i2c.read(address, data_buff, 1, false);
   
    return(data_buff[0]);
}

int ReadFRM(void) {
    data_buff[0]=0x21;
   
    i2c.write(address, data_buff, 1, false);
   
    data_buff[0]=0x0;
    i2c.read(address, data_buff, 1, false);
   
    return(data_buff[0]);
}

int ReadBtn(void) {
    data_buff[0]=0x5;
   
    i2c.write(address, data_buff, 1, false);
   
    data_buff[0]=0x0;
    i2c.read(address, data_buff, 1, false);
   
    return(data_buff[0]);
}

void Clr_scr(void) {
    data_buff[0]=0x60;
   
    i2c.write(address, data_buff, 1, false);
}

void Write_to_scr(int y, int x, char d) {
    data_buff[0]=0x61;
    data_buff[1]=y;
    data_buff[2]=x;
    data_buff[3]=d;
   
    i2c.write(address, data_buff, 4, false);
}

void Str_to_scr(int y, int x, char* c_str, int len) {
    int i = 0;
    for (i = 0; i < len; i++) {
        Write_to_scr(y, x + i, c_str[i]);
        wait(0.05); //need time to write character
    }
}

void Print_mode(int mode, bool in_menu)
{   
    Clr_scr();
    switch (mode){
        case 1:
            if(in_menu)
            {
                Str_to_scr(1, 0, "MENU:", 5);
                Str_to_scr(2, 0, "- comfort", 9);
            }
            else
            {
                Str_to_scr(1, 0, "MODE: comfort", 13);
            }
            break;
        case 2:
            if(in_menu)
            {
                Str_to_scr(1, 0, "MENU:", 5);
                Str_to_scr(2, 0, "- sport", 7);
            }
            else
            {
                Str_to_scr(1, 0, "MODE: sport", 11);
            }
            break;
        case 3:
            if(in_menu)
            {
                Str_to_scr(1, 0, "MENU:", 5);
                Str_to_scr(2, 0, "- eco", 7);
            }
            else
            {
                Str_to_scr(1, 0, "MODE: eco", 9);
            }
            break;
        //default:
//            if(in_menu)
//            {
//                Str_to_scr(1, 0, "MENU:", 5);
//                Str_to_scr(2, 0, "- comfort", 9);
//            }
//            else
//            {
//                Str_to_scr(1, 0, "MODE: comfort", 13);
//            }
//            break;
    }
}
  
int Get_next_mode(int mode)
{
    int result;
    int unit = 1;
    if(mode == 3)
    {
        result = 1;
    }
    else 
    {
        result = mode + unit ;  
    }
    return result;
}
  
int Get_previous_mode(int mode)
{
    int result;
    int unit = 1;
    if(mode == 1)
    {
        result = 3;
    }
    else 
    {
        result = mode - unit ;  
    }
    return result;
}

void btnFunc(void const *args) 
{
    tmp = ReadBtn();
}
 
int main()
{
    char b_buf[20];

    memset(b_buf, 0, 20);

    wait(1);  //need time to boot display
    pc.printf("Hello !\r\n");

    tmp = FindAddress();
    pc.printf("Address:%d\r\n", tmp);
    wait(0.2); myled = ~myled;

    tmp = ReadID();
    pc.printf("ID:%d\r\n", tmp);
    wait(0.2); myled = ~myled;

    tmp = ReadFRM();
    pc.printf("FRM:%d\r\n", tmp);
    wait(0.2); myled = ~myled;

    Clr_scr();
    wait(0.2); myled = ~myled;

    Write_to_scr(2, 0, '1');
    wait(0.2); myled = ~myled;

    Str_to_scr(1, 0, "Hello", 5);
    wait(0.2); myled = ~myled;
    
    bool in_menu = false;
    int current_mode = 1;
    int shown_mode = 1;
 
  while(1) 
  {
    Thread btnThread(btnFunc);
    
    if(tmp == 14)
    {
        in_menu = !in_menu;
        if(in_menu)
        {
            Print_mode(shown_mode, in_menu);
        }
        //if(!in_menu)
//        {
//            Print_mode(current_mode);
//        }        
        wait(0.2);
    }
    
    if(tmp == 13 && in_menu)
    {
        shown_mode = Get_next_mode(shown_mode);
        Print_mode(shown_mode, in_menu);
        wait(0.2);
    }
    
    if(tmp == 11 && in_menu)
    {
        shown_mode = Get_previous_mode(shown_mode);
        Print_mode(shown_mode, in_menu);
        wait(0.2);
    }
    
    if(tmp == 7 && in_menu)
    {
        current_mode = shown_mode;
        in_menu = !in_menu;
        Print_mode(current_mode, in_menu);
        wait(0.2);
    } 
       
  }
}

